{"version":3,"sources":["assets\\Scripts\\tween.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["const { ccclass, property } = cc._decorator;\r\n\r\ntype Trios = {\r\n    grand: Array<string>;\r\n    mini: Array<string>;\r\n    maxi: Array<string>;\r\n    minor: Array<string>;\r\n    major: Array<string>;\r\n};\r\n\r\n@ccclass\r\nexport default class NewClass extends cc.Component {\r\n    @property([cc.Node])\r\n    nodes: cc.Node[] = [];\r\n\r\n    @property([cc.Sprite])\r\n    sprites: cc.Sprite[] = [];\r\n\r\n    @property(cc.Node)\r\n    winText: cc.Node = null;\r\n\r\n    @property(cc.Button)\r\n    resetButton: cc.Button = null;\r\n\r\n    private isTappedMap = new Map<cc.Node, boolean>();\r\n\r\n    private elements: string[] = [\"grand\", \"mini\", \"maxi\", \"major\", \"minor\"];\r\n\r\n    private trios: Trios = {\r\n        grand: [],\r\n        mini: [],\r\n        maxi: [],\r\n        minor: [],\r\n        major: []\r\n    };\r\n\r\n    private tapCount = 0;\r\n\r\n    private originalSpriteFrames: cc.SpriteFrame[] = []; \r\n    private gameOver: boolean = false;\r\n\r\n    onLoad() {\r\n        this.nodes.forEach((node, index) => {\r\n            this.initializeNode(node);\r\n            if (this.sprites[index]) {\r\n                this.originalSpriteFrames[index] = this.sprites[index].spriteFrame; \r\n            }\r\n        });\r\n\r\n        if (this.resetButton) {\r\n            this.resetButton.node.on('click', this.resetNodes, this);\r\n        }\r\n    }\r\n\r\n    initializeNode(node: cc.Node) {\r\n        if (node) {\r\n            this.isTappedMap.set(node, false);\r\n\r\n            node.on(\r\n                cc.Node.EventType.TOUCH_END,\r\n                () => {\r\n                    if(!this.gameOver) {\r\n                        this.addToPair(node);\r\n                    }\r\n                },\r\n                this\r\n            );\r\n        }\r\n    }\r\n\r\n    addToPair(node: cc.Node) {\r\n        const isTapped = this.isTappedMap.get(node) ?? false;\r\n        if (isTapped) {\r\n            return;\r\n        }\r\n    \r\n        this.refillElements();\r\n    \r\n        const element = this.elements.shift(); // Remove and get the first element\r\n        if (element !== undefined) {\r\n            const spriteIndex = this.nodes.indexOf(node);\r\n            if (spriteIndex >= 0 && this.sprites[spriteIndex]) {\r\n                cc.resources.load(element, cc.SpriteFrame, (err, spriteFrame) => {\r\n                    if (!err && spriteFrame) {\r\n                        // Update the sprite frame\r\n                        this.sprites[spriteIndex].spriteFrame = spriteFrame as cc.SpriteFrame;\r\n                        console.log(`Sprite for node ${spriteIndex} updated to ${element}.`);\r\n    \r\n                        // Add the element to its corresponding array\r\n                        this.trios[element as keyof Trios].push(element);\r\n                        console.log(`Added ${element} to ${element} array:`, this.trios[element as keyof Trios]);\r\n    \r\n                        // Check if the array's length has reached 3\r\n                        if (this.trios[element as keyof Trios].length === 3) {\r\n                            console.log(`${element} array has 3 elements, checking for a win.`);\r\n                            this.isWinning(); // Call isWinning here, after sprite update\r\n                        }\r\n                    } else {\r\n                        console.error(`Failed to load sprite for ${element}:`, err);\r\n                    }\r\n                });\r\n            }\r\n        } else {\r\n            console.error(\"Unexpected error: Element is undefined.\");\r\n        }\r\n    \r\n        this.isTappedMap.set(node, true);\r\n        this.tapCount++;\r\n    }\r\n    \r\n    \r\n\r\n    resetNodes() {\r\n        this.nodes.forEach((node, index) => {\r\n            if (node) {\r\n                this.isTappedMap.set(node, false);\r\n                const sprite = this.sprites[index];\r\n                if (sprite) {\r\n                    sprite.spriteFrame = this.originalSpriteFrames[index] || null; // Reset to original sprite\r\n                }\r\n            }\r\n        });\r\n\r\n        // Reset trios and elements\r\n        this.trios = { grand: [], mini: [], maxi: [], minor: [], major: [] };\r\n        this.elements = [\"grand\", \"mini\", \"maxi\", \"major\", \"minor\"];\r\n        this.shuffleArray(this.elements);\r\n        this.tapCount = 0;\r\n        this.gameOver = false;\r\n\r\n        this.winText.active = false;\r\n\r\n        console.log(\"Nodes and arrays have been reset.\");\r\n    }\r\n\r\n    isWinning() {\r\n        // Filter the indices of tapped nodes\r\n        const tappedIndices = this.nodes\r\n            .map((node, index) => (this.isTappedMap.get(node) ? index : -1))\r\n            .filter(index => index >= 0);\r\n    \r\n        // Check for winning combinations only among tapped indices\r\n        for (let i = 0; i < tappedIndices.length - 2; i++) {\r\n            for (let j = i + 1; j < tappedIndices.length - 1; j++) {\r\n                for (let k = j + 1; k < tappedIndices.length; k++) {\r\n                    const sprite1 = this.sprites[tappedIndices[i]]?.spriteFrame?.name;\r\n                    const sprite2 = this.sprites[tappedIndices[j]]?.spriteFrame?.name;\r\n                    const sprite3 = this.sprites[tappedIndices[k]]?.spriteFrame?.name;\r\n    \r\n                    if (sprite1 && sprite2 && sprite3 && sprite1 === sprite2 && sprite2 === sprite3) {\r\n                        this.gameOver = true;\r\n                        this.winText.active = true;\r\n                        console.log(\"Winning condition met:\", sprite1, sprite2, sprite3);\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n    \r\n        console.log(\"No winning condition found.\");\r\n    }\r\n    \r\n    shuffleArray(array: string[]) {\r\n        for (let i = array.length - 1; i > 0; i--) {\r\n            const j = Math.floor(Math.random() * (i + 1));\r\n            [array[i], array[j]] = [array[j], array[i]];\r\n        }\r\n    }\r\n    \r\n    refillElements() {\r\n        if (this.elements.length === 0) {\r\n            this.elements = [\"grand\", \"mini\", \"maxi\", \"major\", \"minor\"];\r\n            this.shuffleArray(this.elements);\r\n            console.log(\"Elements reshuffled:\", this.elements);\r\n        }\r\n    }\r\n    \r\n}\r\n"]}