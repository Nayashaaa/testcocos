{"version":3,"sources":["assets\\basic.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAM,IAAA,KAAwB,EAAE,CAAC,UAAU,EAAnC,OAAO,aAAA,EAAE,QAAQ,cAAkB,CAAC;AAG5C;IAAmC,yBAAY;IAA/C;QAAA,qEAuDC;QApDG,UAAI,GAAc,EAAE,CAAC;QAEb,gBAAU,GAAkB,IAAI,CAAC;QACjC,iBAAW,GAAY,KAAK,CAAC;;IAiDzC,CAAC;IA/CG,qBAAK,GAAL;QACI,IAAM,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;QAClD,IAAI,MAAM,EAAE;YACR,IAAM,eAAe,GAAG,MAAM,CAAC,YAAY,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC;YACvD,IAAI,eAAe,EAAE;gBACjB,eAAe,CAAC,IAAI,CAAC,EAAE,CAAC,OAAO,EAAE,IAAI,CAAC,eAAe,EAAE,IAAI,CAAC,CAAC;aAChE;SACJ;IACL,CAAC;IAED,+BAAe,GAAf;QACI,IAAI,IAAI,CAAC,WAAW,EAAE;YAClB,IAAI,CAAC,mBAAmB,EAAE,CAAC;SAC9B;aAAM;YACH,IAAI,CAAC,oBAAoB,EAAE,CAAC;SAC/B;IACL,CAAC;IAED,oCAAoB,GAApB;QAAA,iBAoBC;QAnBG,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QAExB,IAAI,CAAC,UAAU,GAAG,WAAW,CAAC;YAC1B,6BAA6B;YAC7B,IAAM,KAAK,GAAG,KAAI,CAAC,IAAI,CAAC,GAAG,CAAC,UAAA,GAAG,IAAI,OAAA,GAAG,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,YAAY,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC,MAAM,EAA3D,CAA2D,CAAC,CAAC;YAC5G,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;YACP,gDAAgD;YAChD,IAAM,SAAS,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;YAC3B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;gBACvC,KAAK,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,0BAA0B;aACtD;YACD,KAAK,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,+CAA+C;YAEpF,sCAAsC;YACtC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBACvC,IAAM,QAAQ,GAAG,KAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,YAAY,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC;gBAC5E,QAAQ,CAAC,MAAM,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;aAC9B;QACL,CAAC,EAAE,GAAG,CAAC,CAAC;IACZ,CAAC;IAED,mCAAmB,GAAnB;QACI,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;QACzB,IAAI,IAAI,CAAC,UAAU,EAAE;YACjB,aAAa,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YAC/B,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;SAC1B;IACL,CAAC;IAnDD;QADC,QAAQ,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;uCACC;IAHJ,KAAK;QADzB,OAAO;OACa,KAAK,CAuDzB;IAAD,YAAC;CAvDD,AAuDC,CAvDkC,EAAE,CAAC,SAAS,GAuD9C;kBAvDoB,KAAK","file":"","sourceRoot":"/","sourcesContent":["const { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class Basic extends cc.Component {\r\n\r\n    @property([cc.Node])\r\n    rows: cc.Node[] = [];\r\n\r\n    private intervalId: number | null = null; \r\n    private isAnimating: boolean = false; \r\n\r\n    start() {\r\n        const button = this.node.getChildByName(\"Button\");\r\n        if (button) {\r\n            const buttonComponent = button.getComponent(cc.Button);\r\n            if (buttonComponent) {\r\n                buttonComponent.node.on('click', this.onButtonClicked, this);\r\n            }\r\n        }\r\n    }\r\n\r\n    onButtonClicked() {\r\n        if (this.isAnimating) {\r\n            this.stopPositionUpdates(); \r\n        } else {\r\n            this.startPositionUpdates(); \r\n        }\r\n    }\r\n\r\n    startPositionUpdates() {\r\n        this.isAnimating = true; \r\n\r\n        this.intervalId = setInterval(() => {\r\n            // Get the texts of each node\r\n            const texts = this.rows.map(row => row.getChildByName(\"Text\").getComponent(cc.RichText).string);\r\nconsole.log(\"fuh\");\r\n            // Shift the texts to create the spinning effect\r\n            const firstText = texts[0];\r\n            for (let i = 0; i < texts.length - 1; i++) {\r\n                texts[i] = texts[i + 1]; // Shift texts to the left\r\n            }\r\n            texts[texts.length - 1] = firstText; // Set the last text to the original first text\r\n\r\n            // Update the text labels in each node\r\n            for (let i = 0; i < this.rows.length; i++) {\r\n                const textNode = this.rows[i].getChildByName(\"Text\").getComponent(cc.Label);\r\n                textNode.string = texts[i];\r\n            }\r\n        }, 100); \r\n    }\r\n\r\n    stopPositionUpdates() {\r\n        this.isAnimating = false; \r\n        if (this.intervalId) {\r\n            clearInterval(this.intervalId); \r\n            this.intervalId = null; \r\n        }\r\n    }\r\n}\r\n"]}