{"version":3,"sources":["assets\\column.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["const { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class ColumnFitter extends cc.Component {\r\n\r\n    @property(cc.Node)\r\n    columnNode: cc.Node = null; // Reference to the column node\r\n\r\n    @property\r\n    columnHeight: number = 700; // Set column height here or in the editor\r\n\r\n    @property(cc.Sprite)\r\n    sprite: cc.Sprite = null; // Reference to the sprite node\r\n\r\n    @property(cc.Texture2D)\r\n    sprite2: cc.Texture2D = null; // Reference to the sprite node\r\n\r\n    init() {\r\n        this.columnHeight = this.columnNode.height;\r\n    }\r\n\r\n    protected onLoad(): void {\r\n        this.init();\r\n    }\r\n\r\n\r\n    start() {\r\n\r\n\r\n        // Prompt the user for input between 1 and 5\r\n        let userInput = parseInt(prompt(\"Enter a number of sprites between 1 and 5\") || \"1\", 10);\r\n\r\n        // Clamp user input to the range of 1 to 5\r\n        userInput = Math.max(1, Math.min(userInput, 5));\r\n\r\n        // Call method to create and position sprites\r\n        this.createSprites(userInput);\r\n    }\r\n\r\n    createSprites(count: number) {\r\n        // Calculate height for each sprite to fit perfectly\r\n        const spriteHeight = this.columnHeight / count;\r\n        console.log(spriteHeight);\r\n\r\n        // Define a set of colors for the sprites\r\n        const colors = [\r\n            cc.Color.RED,\r\n            cc.Color.GREEN,\r\n            cc.Color.BLUE,\r\n            cc.Color.YELLOW,\r\n            cc.Color.MAGENTA\r\n        ];\r\n\r\n        // Remove any existing children in the column node\r\n        this.columnNode.removeAllChildren();\r\n\r\n        for (let i = 0; i < count; i++) {\r\n            // Create a new node for each sprite\r\n            const spriteNode = new cc.Node(`Sprite${i + 1}`);\r\n\r\n\r\n            const sprite = spriteNode.addComponent(cc.Sprite);\r\n            sprite.sizeMode = cc.Sprite.SizeMode.CUSTOM;\r\n            sprite.spriteFrame = new cc.SpriteFrame(this.sprite2);\r\n\r\n            // Set the sprite node's size\r\n            spriteNode.width = this.columnNode.width;\r\n            spriteNode.height = spriteHeight;\r\n\r\n            // Assign a color to the sprite\r\n            spriteNode.color = colors[i % colors.length];\r\n\r\n            // Calculate and set the y position for each sprite\r\n            spriteNode.setPosition(0, (this.columnHeight / 2) - (spriteHeight / 2) - (i * spriteHeight));\r\n\r\n            // Add sprite node to the column node\r\n            this.columnNode.addChild(spriteNode);\r\n        }\r\n    }\r\n}\r\n"]}