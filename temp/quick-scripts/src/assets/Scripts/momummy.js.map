{"version":3,"sources":["assets\\Scripts\\momummy.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["const priorities = {\r\n    up: \"up\",\r\n    down: \"down\",\r\n    left: \"left\",\r\n    right: \"right\"\r\n};\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class NewClass extends cc.Component {\r\n    @property(cc.Button)\r\n    spinBtn: cc.Button = null;\r\n\r\n    @property([cc.Node])\r\n    cells: cc.Node[] = [];\r\n\r\n    @property(cc.Node)\r\n    mummy: cc.Node = null;\r\n\r\n    @property(cc.Node)\r\n    cellsBox: cc.Node = null;\r\n\r\n    @property(cc.Prefab)\r\n    diamondPrefab: cc.Prefab = null;\r\n\r\n    @property(cc.Node)\r\n    collectedDiamonds: cc.Node = null;\r\n\r\n    private diamonds: cc.Node[] = [];\r\n    private diamondsCollected: number = 0;\r\n    private boundaryOffset: number = null;\r\n\r\n    private gridMinX: number = -200; // Bottom-left X\r\n    private gridMaxX: number = 200;  // Top-right X\r\n    private gridMinY: number = -200; // Bottom-left Y\r\n    private gridMaxY: number = 200;  // Top-right Y\r\n\r\n    onLoad() {\r\n        // Add event listener for the spin button\r\n        this.spinBtn.node.on('click', this.spawnDiamonds, this);\r\n    }\r\n\r\n    start() {\r\n        // Initial call to ensure the mummy starts moving if diamonds are present\r\n        this.moveToNearestDiamond();\r\n    }\r\n\r\n    spawnDiamonds() {\r\n        // Remove existing diamonds\r\n        this.diamonds.forEach(diamond => diamond.destroy());\r\n        this.diamonds = [];\r\n        this.diamondsCollected = 0;\r\n\r\n        // Shuffle cell positions randomly\r\n        const shuffledCells = this.cells.sort(() => Math.random() - 0.5);\r\n\r\n        // Generate a random number between 1 and 3 (inclusive) to determine how many diamonds to spawn\r\n        const diamondCount = Math.floor(Math.random() * 3) + 1; // 1, 2, or 3\r\n        console.log(\"Number of diamonds to spawn:\", diamondCount);\r\n\r\n        if (this.mummy.width < 500 && this.mummy.height < 500) {\r\n            for (let i = 0; i < diamondCount; i++) {\r\n                const cell = shuffledCells[i];\r\n                const diamond = cc.instantiate(this.diamondPrefab);\r\n                diamond.parent = this.node; // Attach diamond to the main scene node\r\n                diamond.position = cell.position;\r\n                this.diamonds.push(diamond);\r\n            }\r\n            this.moveToNearestDiamond(); // Move to the nearest diamond\r\n        }\r\n    }\r\n\r\n    moveToNearestDiamond() {\r\n        if (!this.mummy || this.diamonds.length === 0) {\r\n            return;\r\n        }\r\n\r\n        const moveToNextDiamond = () => {\r\n            if (this.diamonds.length === 0) {\r\n                console.log(\"Mummy reached all diamonds!\");\r\n                this.scheduleOnce(() => {\r\n                    this.increaseMummySize(() => {\r\n                        // Restart movement if diamonds are left\r\n                        if (this.diamonds.length > 0) {\r\n                            moveToNextDiamond();\r\n                        }\r\n                    });\r\n                }, 3);\r\n                return;\r\n            }\r\n             // Function to calculate boundary offset\r\n             const calculateBoundaryOffset = (mummyWidth: number) => {\r\n                const cellWidth = this.cells[0].width;\r\n                return mummyWidth / 2 - cellWidth / 2;\r\n            };\r\n\r\n            \r\n\r\n            // Find the nearest diamond\r\n            const mummyPosition = this.mummy.position;\r\n            let nearestDiamond = this.diamonds[0];\r\n            let shortestDistance = mummyPosition.sub(nearestDiamond.position).mag();\r\n\r\n            this.diamonds.forEach(diamond => {\r\n                const distance = mummyPosition.sub(diamond.position).mag();\r\n                if (distance < shortestDistance) {\r\n                    shortestDistance = distance;\r\n                    nearestDiamond = diamond;\r\n                }\r\n            });\r\n\r\n            const diamondPosition = nearestDiamond.position;\r\n            const targetCell = this.cells.find(cell => cell.position.equals(diamondPosition));\r\n            if (!targetCell) {\r\n                //console.error(\"Nearest diamond is not inside any cell.\");\r\n                return;\r\n            }\r\n            const targetCellPosition = targetCell.position;\r\n            \r\n            // Calculate boundary offset\r\n            this.boundaryOffset = calculateBoundaryOffset(this.mummy.width);\r\n            // Clamp mummy's position to stay within the cells box\r\n            const clampedX = cc.misc.clampf(\r\n                mummyPosition.x,\r\n                Math.max(this.gridMinX + this.boundaryOffset, targetCellPosition.x - this.boundaryOffset),\r\n                Math.min(this.gridMaxX - this.boundaryOffset, targetCellPosition.x + this.boundaryOffset)\r\n            );\r\n            const clampedY = cc.misc.clampf(\r\n                mummyPosition.y,\r\n                Math.max(this.gridMinY + this.boundaryOffset, targetCellPosition.y - this.boundaryOffset),\r\n                Math.min(this.gridMaxY - this.boundaryOffset, targetCellPosition.y + this.boundaryOffset)\r\n            );\r\n            // Move mummy to the nearest diamond while staying within bounds\r\n            if (Math.abs(mummyPosition.x - diamondPosition.x) > Math.abs(mummyPosition.y - diamondPosition.y)) {\r\n                cc.tween(this.mummy)\r\n                    .to(1, { position: new cc.Vec3(clampedX, mummyPosition.y, mummyPosition.z) }, { easing: \"sineInOut\" })\r\n                    .call(() => {\r\n                        cc.tween(this.mummy)\r\n                            .to(1, { position: new cc.Vec3(clampedX, clampedY, mummyPosition.z) }, { easing: \"sineInOut\" })\r\n                            .call(() => {\r\n                                console.log(\"Mummy reached a diamond!\");\r\n                                this.collectDiamond(nearestDiamond);\r\n                                moveToNextDiamond();\r\n                            })\r\n                            .start();\r\n                    })\r\n                    .start();\r\n            }else {\r\n                cc.tween(this.mummy)\r\n                    .to(1, { position: new cc.Vec3(mummyPosition.x, clampedY, mummyPosition.z) }, { easing: \"sineInOut\" })\r\n                    .call(() => {\r\n                        cc.tween(this.mummy)\r\n                            .to(1, { position: new cc.Vec3(clampedX, clampedY, mummyPosition.z) }, { easing: \"sineInOut\" })\r\n                            .call(() => {\r\n                                console.log(\"Mummy reached a diamond!\");\r\n                                this.collectDiamond(nearestDiamond);\r\n                                moveToNextDiamond();\r\n                            })\r\n                            .start();\r\n                    })\r\n                    .start();\r\n            }\r\n\r\n\r\n            // // Move mummy to the nearest diamond\r\n            // cc.tween(this.mummy)\r\n            //     .to(1, { position: diamondPosition }, { easing: \"sineInOut\" })\r\n            //     .call(() => {\r\n            //         console.log(\"Mummy reached a diamond!\");\r\n            //         this.collectDiamond(nearestDiamond);\r\n            //         moveToNextDiamond();\r\n            //     })\r\n            //     .start();\r\n        };\r\n\r\n        moveToNextDiamond();\r\n    }\r\n\r\n    collectDiamond(diamond: cc.Node) {\r\n        const index = this.diamonds.indexOf(diamond);\r\n        if (index !== -1) {\r\n            this.diamonds.splice(index, 1);\r\n        }\r\n\r\n        this.diamondsCollected++;\r\n\r\n        const collectedLayouts = this.collectedDiamonds.children;\r\n        if (collectedLayouts.length === 0) {\r\n            console.error(\"No layouts inside collectedDiamonds.\");\r\n            diamond.destroy();\r\n            return;\r\n        }\r\n\r\n        const targetIndex = (this.diamondsCollected - 1) % collectedLayouts.length;\r\n        const targetLayout = collectedLayouts[targetIndex];\r\n\r\n        const worldPosition = targetLayout.parent.convertToWorldSpaceAR(targetLayout.position);\r\n        const targetPosition = this.node.convertToNodeSpaceAR(worldPosition);\r\n\r\n        cc.tween(diamond)\r\n            .to(1, { position: targetPosition }, { easing: \"sineInOut\" })\r\n            .call(() => {\r\n                diamond.setParent(targetLayout);\r\n                diamond.setPosition(cc.Vec3.ZERO);\r\n\r\n                if (this.diamondsCollected % 3 === 0) {\r\n                    collectedLayouts.forEach(layout => layout.removeAllChildren());\r\n                }\r\n            })\r\n            .start();\r\n    }\r\n\r\n    increaseMummySize(callback?: () => void) {\r\n        console.log(\"Increasing mummy size\");\r\n\r\n        const cellWidth = this.cells[0]?.width || 100;\r\n        const cellHeight = this.cells[0]?.height || 100;\r\n\r\n        if (!this.mummy || this.mummy.width >= 500 || this.mummy.height >= 500) {\r\n            console.log(\"Mummy has reached the maximum size. Game Over!\");\r\n            return;\r\n        }\r\n\r\n        \r\n        // Convert mummy's position to world space\r\n        const mummyWorldPosition = this.mummy.parent.convertToWorldSpaceAR(this.mummy.position);\r\n\r\n        // Convert mummy's world position to the local space of cellsBox\r\n        const mummyLocalInCells = this.cellsBox.convertToNodeSpaceAR(mummyWorldPosition);\r\n\r\n        // Calculate the mummy's current bounds in cellsBox local space\r\n        const currentLeft = mummyLocalInCells.x - this.mummy.width / 2;\r\n        const currentRight = mummyLocalInCells.x + this.mummy.width / 2;\r\n        const currentTop = mummyLocalInCells.y + this.mummy.height / 2;\r\n        const currentBottom = mummyLocalInCells.y - this.mummy.height / 2;\r\n\r\n        // Determine if there is space for expansion in each direction\r\n        const canExpandLeft = currentLeft - cellWidth >= -this.cellsBox.width / 2;\r\n        const canExpandRight = currentRight + cellWidth <= this.cellsBox.width / 2;\r\n        const canExpandUp = currentTop + cellHeight <= this.cellsBox.height / 2;\r\n        const canExpandDown = currentBottom - cellHeight >= -this.cellsBox.height / 2;\r\n\r\n        const directions = {\r\n            left: canExpandLeft,\r\n            right: canExpandRight,\r\n            up: canExpandUp,\r\n            down: canExpandDown\r\n        };\r\n\r\n        // Extract valid directions\r\n        const validDirections = Object.keys(directions).filter(dir => directions[dir]);\r\n\r\n        console.log(\"Valid directions:\", validDirections);\r\n\r\n        if (validDirections.length < 2) {\r\n            console.log(\"Not enough space to expand in two directions.\");\r\n            callback?.(); // Proceed with movement even if expansion is skipped\r\n            return;\r\n        }\r\n\r\n        // Remove opposite directions (e.g., left and right, up and down)\r\n        const oppositePairs = [[priorities.left, priorities.right], [priorities.up, priorities.down]];\r\n        for (const [dir1, dir2] of oppositePairs) {\r\n            if (validDirections.includes(dir1) && validDirections.includes(dir2)) {\r\n                validDirections.splice(validDirections.indexOf(dir2), 1);\r\n            }\r\n        }\r\n\r\n        console.log(\"Valid directions after removing opposites:\", validDirections);\r\n\r\n        // Select two directions for expansion\r\n        const priority = [priorities.up, priorities.down, priorities.left, priorities.right];\r\n        const selectedDirections = validDirections\r\n            .sort((a, b) => priority.indexOf(a) - priority.indexOf(b))\r\n            .slice(0, 2);\r\n\r\n        console.log(\"Selected directions for expansion:\", selectedDirections);\r\n\r\n        // Perform expansion based on the selected directions\r\n        const expansionTweens = [];\r\n\r\n        if (selectedDirections.includes(priorities.left)) {\r\n            expansionTweens.push(cc.tween(this.mummy)\r\n                .to(1, {\r\n                    width: this.mummy.width + cellWidth,\r\n                    x: this.mummy.x - cellWidth / 2,\r\n                }, { easing: \"sineInOut\" }));\r\n        }\r\n        if (selectedDirections.includes(priorities.right)) {\r\n            expansionTweens.push(cc.tween(this.mummy)\r\n                .to(1, {\r\n                    x: this.mummy.x + cellWidth / 2,\r\n                    width: this.mummy.width + cellWidth\r\n                }, { easing: \"sineInOut\" }));\r\n        }\r\n        if (selectedDirections.includes(priorities.up)) {\r\n            expansionTweens.push(cc.tween(this.mummy)\r\n                .to(1, {\r\n                    y: this.mummy.y + cellHeight / 2,\r\n                    height: this.mummy.height + cellHeight\r\n                }, { easing: \"sineInOut\" }));\r\n        }\r\n        if (selectedDirections.includes(priorities.down)) {\r\n            expansionTweens.push(cc.tween(this.mummy)\r\n                .to(1, {\r\n                    y: this.mummy.y - cellHeight / 2,\r\n                    height: this.mummy.height + cellHeight\r\n                }, { easing: \"sineInOut\" }));\r\n        }\r\n\r\n        // Start the tweens sequentially\r\n        if (expansionTweens.length > 0) {\r\n            expansionTweens.reduce((prev, curr) => prev.call(() => curr.start()), cc.tween(this.mummy))\r\n                .call(() => {\r\n                    // Wait for 2 seconds after the expansion is complete\r\n                    this.scheduleOnce(() => {\r\n                        callback?.();\r\n                    }, 2);\r\n                })\r\n                .start();\r\n        } else {\r\n            callback?.(); // Proceed with movement if no expansion happens\r\n        }\r\n    }\r\n\r\n    stopGame() {\r\n        console.log(\"Game has been stopped.\");\r\n        cc.director.pause();\r\n    \r\n    }\r\n}\r\n"]}